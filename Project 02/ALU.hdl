// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/02/ALU.hdl

/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, yï¿½x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * The bit-combinations that yield each function are 
 * documented in the book. In addition, the ALU 
 * computes two 1-bit outputs: if the ALU output
 * is 0, zr is set to 1; otherwise zr is set to 0;
 * If out<0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values, 
// as follows:
// if (zx==1) set x = 0        // 16-bit constant
// if (nx==1) set x = ~x       // bitwise "not"
// if (zy==1) set y = 0        // 16-bit constant
// if (ny==1) set y = ~y       // bitwise "not"
// if (f==1)  set out = x + y  // integer 2's complement addition
// if (f==0)  set out = x & y  // bitwise "and"
// if (no==1) set out = ~out   // bitwise "not"
// if (out==0) set zr = 1
// if (out<0) set ng = 1

  
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if 1) or out = x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out==0), 0 otherwise
        ng; // 1 if (out<0),  0 otherwise

    PARTS:
    // Manipulate x
    //Not(in=zx, out=negatedZx);
    //And16(a=x, b[0..15]=negatedZx ,out = afterZx);

    Not16(in = x, out = negX);
    And16(a = x, b = negX, out = zeroX);
    Mux16(a = x, b = zeroX, sel = zx, out = afterZx);

    Not16(in = afterZx, out = negatedX);
    Mux16(a = afterZx, b=negatedX, out = afterNx);


    // Manipulate y
    //Not(in=zy, out=negatedZy);
    //And16(a=y, b[0..15]=negatedYx, out = afterZy);

    Not16(in = y, out = negY);
    And16(a = y, b = negY, out = zeroY);
    Mux16(a = y, b = zeroY, sel = zy, out = afterZy);


    Not16(in = afterZy, out = negatedY);
    Mux16(a = afterZy, b=negatedY, out = afterNy);


    //Output
    Add16(a=afterNx ,b=afterNy, out=positiveF);
    And16(a=afterNx,b=afterNy, out=zeroF);
    Mux16(a=zeroF, b=positiveF, sel=f, out=tempEval);

    Not16(in = tempEval, out = negatedOut);
    Mux16(a = tempEval, b = negatedOut, sel = no, out = res, out[15] = t);
    Mux16(a = res, b = false, sel = false, out = out);



    And(a = true, b = t, out = ng); // maybe flip to out[15]

    Mux16(a = res, b = false, sel = false, out[0..7] = r1, out[8..15] = r2);
    Or8Way(in = r1, out = firstOr);
    Or8Way(in = r2, out = secondOr);
    Or(a = firstOr, b = secondOr, out = finalOr);
    Not(in = finalOr, out = zr);
}
