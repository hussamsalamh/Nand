// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A basic math library.
 */
class Math {

    static Array twoToThe;
	static int temp;


    /** Initializes the library. */
    function void init() {
        var int i;
		var int power;
        let twoToThe = Array.new(16);
		let i = 0;
		let power = 1;

		while(i < 16) {
			let twoToThe[i] = power;
			let power = power + power;
			let i = i + 1;
		}

        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }


	function int returnSign(int x,int y,int res) {
        if(((y < 0)&(x > 0))|((y > 0)&(x < 0))) {
            let res = -res;
        }
        return res;
    }

    /** Returns the product of x and y. */
    function int multiply(int x, int y) {
        var int sum;
        var int shiftedX;
        var int j;
		var int absX;
		var int absY;

		if ((x = 0) | (y = 0)) {
			return 0;
		}

        let absX = Math.abs(x);
        let absY = Math.abs(y);

        let sum = 0;
        let shiftedX = absX;

        let j = 0;

        while (j < 16) {

            if (Math.bit(absY, j)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let j = j + 1;
        }
		return Math.returnSign(x, y, sum);
    }

    function int divideHelper(int x, int y) {
        var int q;

        if ((y > x) | (y < 0)) { //TODO was different, see dans notes
            return 0;
        }
        let q = Math.divideHelper(x, (y+y));


        if (temp < y) {
            return (q + q);
        }
        else {
			let temp = temp - y;
            return (q + q + 1);
        }
    }


    /** Returns the integer part of x/y. */
    function int divide(int x, int y) {
        var int absDivideVal;
		let temp = Math.abs(x);
        let absDivideVal = Math.divideHelper(temp, Math.abs(y));

		return Math.returnSign(x, y, absDivideVal);
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y;
        var int j;
        var int innerBracket;
        var int eval;

        let y = 0;
        let j = 7;

        while (~(j < 0)) { // j >= 0
            let innerBracket = y + twoToThe[j];
            let eval = Math.multiply(innerBracket, innerBracket);

			if((eval > 0) & ~(eval > x)) {
				let y = innerBracket;
			}
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a < b) {
            return b;
        }
        return a;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }

    /** returns true if the j-th bit of the integer x is 1 else false . */
    function boolean bit(int x, int j) {
        var int jBitOfX;

        let jBitOfX = x & twoToThe[j];

        return jBitOfX > 0;
    }

    function int getTwoToThePowerOf(int j) {
        return twoToThe[j];
    }

    function int mod(int a, int n) {
        return (a - (n * (a / n)));
    }

    function int shiftLeft(int n, int amount) {
        var int i;
        var int retVal;

        let i = amount;
        let retVal = 0;

        while (i < 16) {
            if (Math.bit(n, i)) {
                let retVal = retVal + twoToThe[i - amount];
            }
            let i = i + 1;
        }
        return retVal;
    }

    function int shiftRight(int n, int amount) {
        var int i;
        var int retVal;

        let i = 0;
        let retVal = 0;

        while ((i + amount) < 16) {
            if (Math.bit(n, i)) {
                let retVal = retVal + twoToThe[i + amount];
            }
            let i = i + 1;
        }
        return retVal;
    }

}