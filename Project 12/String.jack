// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {

    field Array stringArray;
    field int mLength;
    field int stringLength;

    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {
        let stringArray = Array.new(maxLength);
        let mLength = maxLength; //TODO is this needed?
        let stringLength = 0;
        return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
        deAlloc(this);
        return;
    }

    /** Returns the current length of this String. */
    method int length() {
        return stringLength;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
        return stringArray[j];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
        let stringArray[j] = c;
        if (stringLength < (j + 1)) {
            let stringLength = j + 1;
        }
        return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
        let stringArray[(stringLength)] = c;
        let stringLength = stringLength + 1;
        return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
        //TODO remove last char?
        let stringLength = stringLength - 1;
        return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
        var int v;
        var int i;
        var boolean neg;
        let i = 0;
        let v = 0;

        //check that first val isnt neg
        if (stringArray[i] = 45) {
            let neg = true;
            let i = i + 1;
        }
        else {
            let neg = false;
        }

        while (i < stringLength) {
            let v = (v * 10) + (stringArray[i] - 48);
            let i = i + 1;
        }

        if (neg) {
            let v = v * -1;
        }
        return v;
    }

    method void int2String(int n) {
        var int lastDigit;
        var int remainingNum;

        if (n = 0) {
            return;
        }

        let remainingNum = n / 10;
        let lastDigit = n - (remainingNum * 10);

        do int2String(remainingNum);
        do appendChar(lastDigit + 48);
        return;
    }

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) {
        let stringLength = 0;

        if (number < 0) {
            let number = number * -1;
            do appendChar(45); //ASCII val of '-'
        }
        do int2String(number);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}