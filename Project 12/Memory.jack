// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * Memory operations library.
 * Heap resides at RAM locations 2048 - 16383;
 */ 
class Memory {

    static Array memory;
    static Array freeList;

    /** Initializes memory parameters. */
    function void init() {
        let memory = 0; //TODO was 2048, check moodle
        let freeList = 2048;
        let freeList[0] = 14334; // amount of free addresses
        let freeList[1] = null; // the next free segment
        return;
    }

    /** Returns the value of the main memory at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the value of the main memory at this address
     *  to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** finds and allocates from the heap a memory block of the 
     *  specified size and returns a reference to its base address. */
    function int alloc(int size) {
        var Array segment;
        var Array prevSegment;
        var Array newSegment;
        var int blockBaseAddr;
        let segment = freeList;
        let prevSegment = null;

        // search for available segment (first fit)
        while(~(segment[0] > size) & ~(segment = null)) {
            //update segment to current next and update prev
            let prevSegment = segment;
            let segment = segment[1];

        }

        if (segment = null) { //didnt find good segment
            return null;
        }

        //found good segment

        if (~(segment[0] = (size + 1))) {
            let newSegment = prevSegment[1] + size + 1;
            let newSegment[0] = segment[0] - size - 1;
            let newSegment[1] = segment[1];
            let prevSegment[1] = newSegment;
        }
        else {
            let prevSegment[1] = segment[1];
        }

        let segment[0] = size + 1;
        let segment = segment + 1;
        return segment;
    }

    /** De-allocates the given object and frees its space. */
    function void deAlloc(int object) {
        var Array segment;
        var Array segToFree;

        //get the size
        let segToFree = object - 1;
        //no next because its going to be last in freeList
        let segToFree[1] = null;

        let segment = freeList;
        //iterate to last
        while(~(segment[1] = null)) {
            let segment = segment[1];
        }

        //add to end of freeList;
        let segment[1] = segToFree;

        return;
    }    
}
