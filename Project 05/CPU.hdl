// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // ***********Decoder**************
    // Outputs 1 if MSB is 0 to know whether to set the A register
    Xor(a=instruction[15], b=true, out=instructionType);
    // Mux in front of A Register
    Mux16(a=ALUOut, b=instruction[0..14], sel=instructionType, out=newAValue);
    // Takes value from A Register
    Mux16(a=ARegisterout, b=ALUOut);




    ARegister(in=newAValue,load=instructionType,out=ARegisterOut,
    out= addressM);
    ALU(x=DRegisterOut,y=outAM,zx=instruction[12],nx=instruction[11],
    zy=instruction[10],ny=zx=instruction[9],f=zx=instruction[8],
    no=zx=instruction[7],out=ALUOut,zr,ng);

    // Mux before ALU - determined by a bit
    Mux16(a=ARegisterOut,b=inM,sel=instruction[12],out=outAM); // Register A/M



    DRegister(in=ALUOut,load=instruction[4],out=DRegisterOut);
    // PC
    PC(in=ARegisterOut,load,inc,reset=reset,out=pc);
}