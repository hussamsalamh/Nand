/**
* This chip is an extension of the book CPU by using the extended ALU.
* More specificly if instruction[15]==0 or (instruction[14] and instruction[13] equals 1)
* the CpuMul behave exactly as the book CPU.
* While if it is C instruction and instruction[13] == 0 the output will be D*A/M 
* (according to instruction[12]).
* Moreover, if it is c instruction and instruction[14] == 0 it will behave as follows:
*
* instruction:  | 12 | 11 | 10 |
* _____________________________
* shift left D  | 0  | 1  | 1  |
* shift left A  | 0  | 1  | 0  |
* shift left M  | 1  | 1  | 0  |
* shift right D | 0  | 0  | 1  |
* shift right A | 0  | 0  | 0  |
* shift right M | 1  | 0  | 0  |
**/

CHIP CpuMul{

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

     PARTS:


     //if instruction[15] == 0 (A instruction) then behave normal to the cpu
     //else

     Mux16(a = instruction ,b = ,sel = instruction[15] ,out = afterInstType);

     //Decide if behave like book CPU
     // instruction[15] == 0 OR (instruction[13] and instruction[14] == 1) behave like book CPU
     And(a = instruction[14], b = instruction[13], out = xBitsAfterAnd);
     Not(in = instruction[15], out = negMSB);
     Or(a = negMSB, b = xBitsAfterAnd, out = negInstructionType);
     Not(in = negInstructionType, out = instructionType); // out == 0 behave like book CPU

     CPU(inM = inM, instruction = instruction, reset = reset, outM = outM_CPU, writeM = writeM_CPU,
     addressM = addressM_CPU, pc = pc_CPU);



     Mul(a = inM, b = outM_CPU, out = outM_afterMult);
     // should i make another mul for the A reg? and then mux will choose by instruction[12]
     ShiftLeft(in[15] = true, in[0..14] = outM_CPU, out = out_ShiftLeft_D);
     ShiftLeft(in[15] = true, in[0..14] = inM, out = out_ShiftLeft_M);
     ShiftLeft(in[15] = true, in[0..14] = addressM, out = out_ShiftLeft_A);

     ShiftRight(in,out);


}
