/**
* This chip is an extension of the book CPU by using the extended ALU.
* More specificly if instruction[15]==0 or (instruction[14] and instruction[13] equals 1)
* the CpuMul behave exactly as the book CPU.
* While if it is C instruction and instruction[13] == 0 the output will be D*A/M 
* (according to instruction[12]).
* Moreover, if it is c instruction and instruction[14] == 0 it will behave as follows:
*
* instruction:  | 12 | 11 | 10 |
* _____________________________
* shift left D  | 0  | 1  | 1  |
* shift left A  | 0  | 1  | 0  |
* shift left M  | 1  | 1  | 0  |
* shift right D | 0  | 0  | 1  |
* shift right A | 0  | 0  | 0  |
* shift right M | 1  | 0  | 0  |
**/

CHIP CpuMul{

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

     PARTS:



     //if instruction[15] == 0 (A instruction) then behave normal to the cpu
     //else

     //Mux16(a = instruction ,b = ,sel = instruction[15] ,out = afterInstType);

     //Decide if behave like book CPU
     // instruction[15] == 0 OR (instruction[13] and instruction[14] == 1) behave like book CPU
   //  And(a = instruction[14], b = instruction[13], out = xBitsAfterAnd);
     //Not(in = instruction[15], out = negMSB);
     //Or(a = negMSB, b = xBitsAfterAnd, out = negInstructionType);
     //Not(in = negInstructionType, out = instructionType); // out == 0 behave like book CPU

     //CPU(inM = inM, instruction = instruction, reset = reset, outM = outMCPU, writeM = writeM,
     //addressM = addressMCPU, addressM = addressM, pc = pc);

     //Not(in= instruction[13], out=multiplicationBit);

     // Decides whether to multiply by M or A
     //Mux16(a[0..14] = addressMCPU, a[15] = true, b= inM, sel=instruction[12],
     //out=multiplicationVariable);
     //ExtendAlu(x=outMCPU,y=multiplicationVariable,instruction=instruction[6..14],out = ALUOUT,zr = zr,ng = ng);
     //Mux16(a = outMCPU, b = ALUOUT, sel = instructionType, out = outM);
}

