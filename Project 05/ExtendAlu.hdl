/**
* The input of the extends ALU is instruction[9] and x[16],y[16].
* the output is define as follows:
* If instruction[7..8] equals 1 the the output is exactly as the ALU.
* Where instruction[5]=zx,instruction[4]=nx,...,instruction[0]=no.
* If instruction[7] equals 0 the output will be x*y and disregard the rest 
* of the instruction.
*
* If instruction[8] equals 0 the output will be shift.
* Then, if instruction[4] equals 0 it will return shift of y otherwise shift 
* of x, moreover if instruction[5] equals 0 it will return shift right 
* otherwise shift left.
**/
CHIP ExtendAlu{
     IN x[16],y[16],instruction[9];
     OUT out[16],zr,ng;
     
     PARTS:
     // Compute regular ALU operation on x and y by instructions
     ALU(x=x,y=y,zx=instruction[5],nx=instruction[4], zy=instruction[3],
     ny=instruction[2],f=instruction[1], no=instruction[0],
     out=ALUOut,zr=regALUzr,ng=regALUng);

     // Leftmost bits 11 - mux ALUout
     // Leftmost bits 10 - x*y
     // Leftmost bits 00 - x*y
      // Leftmost bits 01 -  If instruction[4]=0 shift y, if instruction[4]=1
     // shift x, instruction[5]=1 shift left, instruction[5]=0 shift right

     // Result of Multiplication
     Mul(a=x, b=y, out=multOut);
     // Choose whether to shift x or y
     Mux16(a=y, b=x, sel=instruction[4], out=shiftInput);
     ShiftLeft(in=shiftInput, out= leftShift);
     ShiftRight(in=shiftInput, out= rightShift);
     // Choose between the leftShift and the rightShift
     Mux16(a= rightShift, b = leftShift, sel=instruction[5], out=shiftOutput);

     //Choose which output to deliver
     Mux4Way16(a=multOut, b=shiftOutput, c=multOut, d=ALUOut, sel=instruction[7..8]
      ,out=out);
     ALU(x=multOut, y=true,zx=false,nx=false,zy=false,f=false,no=false,zr=multZr,
     ng=multNg);
     ALU(x=shiftOutput, y=true,zx=false,nx=false,zy=false,f=false,no=false,
     zr=shiftZr, ng=shiftNg);

    // Handle which Zr to output
     Mux(a=shiftZr, b=regALUzr, sel=instruction[8], out=tempZr);
     Mux(a=multZr, b=tempZr, sel=instruction[7], out=zr);

    // Handle which Ng to output
    Mux(a=shiftNg, b=regALUng, sel=instruction[8], out=tempNg);
    Mux(a=multNg, b=tempNg, sel=instruction[7], out=ng);

}
