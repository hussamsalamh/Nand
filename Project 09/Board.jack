

/**
 * Implements the Board of the game TicTacToe
 * Board is initialized to zeros, meaning its empty
 * X is int 1, O is int 2
 */
class Board {


    field Array boardCells;
    field int winner;

    /** Constructs a new board. */
    constructor Board new() {
        let boardCells = Array.new(9);
        //initialize array with zeros


        return this;
    }


    /** Deallocates the object's memory. */
    method void dispose() {
        do boardCells.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /**
     * Returns true if above (-3) and below (+3) of cell are same as given sign
     */
    method bool checkVertical(int cell, int sign) {
        var int above, below, aboveSign, belowSign;
        let above = cell - 3;
        let below = cell + 3;

        if ((above < 0) | (below > 8)) { //check bounds
            return false;
        }

        let aboveSign = boardCells[above];
        let belowSign = boardCells[below];

        if ((sign = aboveSign) & (sign = belowSign)) {
            let winner = sign;
            return true;
        }
        return false;
    }


    /**
     * Returns true if left (-1) and right (+1) of cell are same as given sign
     */
    method bool checkHorizontal(int cell, int sign) {
        var int left, right, leftSign, rightSign;
        let left = cell - 1;
        let right = cell + 1;

        if ((left < 0) | (right > 8)) { //check bounds
            return false;
        }

        let leftSign = boardCells[left];
        let rightSign = boardCells[right];

        if ((sign = leftSign) & (sign = rightSign)) {
            let winner = sign;
            return true;
        }
        return false;
    }


    /**
     * Returns true if left above (-4) and right below (+4) of cell are same as given sign
     */
    method bool checkFirstDiag(int cell, int sign) {
        var int left, right, leftSign, rightSign;
        let left = cell - 4;
        let right = cell + 4;

        if ((left < 0) | (right > 8)) { //check bounds
            return false;
        }

        let leftSign = boardCells[left];
        let rightSign = boardCells[right];

        if ((sign = leftSign) & (sign = rightSign)) {
            let winner = sign;
            return true;
        }
        return false;
    }


    /**
     * Returns true if right above (-2) and left below (+2) of cell are same as given sign
     */
    method bool checkSecondDiag(int cell, int sign) {
        var int left, right, leftSign, rightSign;
        let right = cell - 2;
        let left = cell + 2;

        if ((right < 0) | (left > 8)) { //check bounds
            return false;
        }

        let leftSign = boardCells[left];
        let rightSign = boardCells[right];

        if ((sign = leftSign) & (sign = rightSign)) {
            let winner = sign;
            return true;
        }
        return false;
    }



    /**
     * Checks if there is a consecutive three in a row
     * updates the global field winner if there is a win
     * returns true if there is a win, else false
     */
    method bool checkIfThereIsWin() {
        var int i;
        var int sign;
        let i = 0;

        while (~(i=9)) {
            //get the number in the array slot i
            // if its not zero, check three in a row

            let sign = boardCells[i];

            if (~(sign = 0)) { // if one of these wins, it updates the winner (global field)
                var bool win;

                let win = checkVertical(i, sign);
                if (win = true) {
                    return true;
                }

                let win = checkHorizontal(i, sign);
                if (win = true) {
                    return true;
                }

                let win = checkFirstDiag(i, sign);
                if (win = true) {
                    return true;
                }

                let win = checkSecondDiag(i, sign);
                if (win = true) {
                    return true;
                }

            }
        }
        return false;
    }




    /**
     * Check if there is a three in a row or if the board is full
     * return true if game should end, else false
     */
    method bool checkEndGame() {

        //Check if X or O won
        var bool win;
        let win = checkIfThereIsWin();

        if (win = true) {
            return true;
        }


        //Check if the board is full

        var int i;
        var int counter;
        let i = 0;
        let counter = 0;

        while (~(i = 8)) {
            if ((boardCells[i] = 1) | (boardCells[i] = 2) ) {
                let counter = counter + 1;
            }
            let i = i + 1;
        }

        if (counter = 9) {
            let winner = 3; //tie
            return true;
        }


    }


}



//TODO: check if board is full, makeMove, checkValidMove